
Parameters:
  VpcCIDR:
    Description: CIDR Block for the VPC
    Type: String
    Default: "XXX.XXX.0.0/16"

  Subnet1CIDR:
    Type: String
    Default: "XXX.XXX.1.0/24"
    Description: "Enter your subnet1 CIDR"

  Subnet2CIDR:
    Type: String
    Default: "XXX.XXX.2.0/24"
    Description: "Enter your subnet2 CIDR"

  az1:
    Type: String
    Description: "Enter your AZ-1 ID"

  az2:
    Type: String
    Description: "Enter your AZ-2 ID"

  s3bucketName:
    Type: String
    Default: "yomis3bucket"
    Description: "Enter your S3 Bucket"

  amiID:
    Type: String
    Default: "ami-0d94353f7bad10668"
    Description: "Enter your EC2 AMI ID"

  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - m1.large
    Description: Enter t2.micro, t3.micro, or m1.large. Default is t2.micro.

  dbInstanceID:
    Type: String
    Default: myDBInstance
    Description: My database instance
    
    
  dbName:
    Type: String
    Default: mydb
    Description: My database
    
    
  dbInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: DB instance class
    
   
  dbAllocatedStorage:
    Type: Number
    Default: '20'
    Description: The size of the database (GiB)
  
    
  dbUsername:
    Type: String
    NoEcho: 'true'
    Default: Admin
    Description: Username for MySQL database access
    
    
  dbPassword:
    Type: String
    NoEcho: 'true'
    Default: "Yomi500"
    Description: Password MySQL database access
    
    
  dbPort:
    Type: Number
    Default: 3306
    Description: "Enter your Database port Number"

Resources:
  customVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref customVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref customVPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref customVPC
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Ref az1
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref customVPC
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Ref az2
      MapPublicIpOnLaunch: true

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2
      VpcId: !Ref customVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ALB
      VpcId: !Ref customVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS
      VpcId: !Ref customVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref dbPort
          ToPort: !Ref dbPort
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref s3bucketName
      VersioningConfiguration:
        Status: Enabled
  
  YomiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: "/"
      Name: MyTargets
      Port: 80
      Protocol: HTTP
      TargetType: instance  
      VpcId: !Ref customVPC

  customLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EC2SecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: customLoadBalancer
      Scheme: internet-facing
      Type: application
      Tags: 
        - Key: Name
          Value: customLoadBalancer
      IpAddressType: ipv4

  yomiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref YomiTargetGroup
      LoadBalancerArn: !Ref customLoadBalancer
      Port: 80
      Protocol: HTTP

  yomiLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: "yomiLaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref amiID
        InstanceType: !Ref InstanceTypeParameter

  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref yomiLaunchTemplate
        Version: !GetAtt yomiLaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles: 
        - Ref: "RootRole"

  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "RootRole"

  yomiDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  rdsDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref dbInstanceID
      DBName: !Ref dbName
      DBInstanceClass: !Ref dbInstanceClass
      AllocatedStorage: !Ref dbAllocatedStorage
      Engine: MySQL
      Port: !Ref dbPort
      EngineVersion: "8.0.33"
      MasterUsername: !Ref dbUsername
      MasterUserPassword: !Ref dbPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref yomiDBSubnetGroup
      